// Frontend/tests/screens/LoginScreen.simple.test.tsx
import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import LoginScreen from '../../app/(tabs)/login';
import { AuthContext } from '../../context/AuthContext';

// Mock dependencies
jest.mock('expo-router', () => ({
  router: {
    replace: jest.fn(),
    push: jest.fn()
  }
}));

jest.mock('../../context/ThemeContext', () => ({
  useStyleTheme: () => ({ theme: 'light' })
}));

// Mock Alert
const mockAlert = {
  alert: jest.fn()
};

jest.mock('react-native', () => {
  const RN = jest.requireActual('react-native');
  return {
    ...RN,
    Alert: mockAlert
  };
});

describe('LoginScreen - Simple Tests', () => {
  const mockAuthContext = {
    user: null,
    token: null,
    ownedMills: [],
    isLoading: false,
    login: jest.fn(),
    logout: jest.fn(),
    register: jest.fn(),
    updateUser: jest.fn(),
    changePassword: jest.fn(),
    fetchOwnedMills: jest.fn()
  };

  const renderWithContext = (contextValue = mockAuthContext) => {
    return render(
      <AuthContext.Provider value={contextValue}>
        <LoginScreen />
      </AuthContext.Provider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('renders all form elements correctly', () => {
    const { getByPlaceholderText, getByText } = renderWithContext();
    
    expect(getByPlaceholderText('Email')).toBeTruthy();
    expect(getByPlaceholderText('Password')).toBeTruthy();
    expect(getByText('Login')).toBeTruthy();
    expect(getByText("Don't have an account? Register here")).toBeTruthy();
    expect(getByText('Welcome to LumberLink')).toBeTruthy();
  });

  it('updates email input correctly', () => {
    const { getByPlaceholderText } = renderWithContext();
    const emailInput = getByPlaceholderText('Email');
    
    fireEvent.changeText(emailInput, 'test@example.com');
    expect(emailInput.props.value).toBe('test@example.com');
  });

  it('updates password input correctly', () => {
    const { getByPlaceholderText } = renderWithContext();
    const passwordInput = getByPlaceholderText('Password');
    
    fireEvent.changeText(passwordInput, 'password123');
    expect(passwordInput.props.value).toBe('password123');
  });

  it('shows loading state when isLoading is true', () => {
    const loadingContext = {
      ...mockAuthContext,
      isLoading: true
    };

    const { getByText } = renderWithContext(loadingContext);
    expect(getByText('Logging in...')).toBeTruthy();
  });

  it('calls register navigation when register link is pressed', () => {
    const { router } = require('expo-router');
    const { getByText } = renderWithContext();
    
    fireEvent.press(getByText("Don't have an account? Register here"));
    expect(router.push).toHaveBeenCalledWith('/register');
  });

  it('validates empty fields on login attempt', () => {
    const { getByText } = renderWithContext();
    
    // Try to login with empty fields
    fireEvent.press(getByText('Login'));
    
    // Check that Alert.alert was called (though we can't easily test the exact timing)
    expect(mockAlert.alert).toHaveBeenCalled();
  });
});